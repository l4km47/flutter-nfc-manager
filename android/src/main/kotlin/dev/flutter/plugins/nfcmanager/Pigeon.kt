// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.flutter.plugins.nfcmanager

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class PigeonTypeNameFormat(val raw: Int) {
  EMPTY(0),
  WELLKNOWN(1),
  MIMEMEDIA(2),
  ABSOLUTEURI(3),
  EXTERNALTYPE(4),
  UNKNOWN(5),
  UNCHANGED(6);

  companion object {
    fun ofRaw(raw: Int): PigeonTypeNameFormat? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonMifareClassicType(val raw: Int) {
  CLASSIC(0),
  PLUS(1),
  PRO(2),
  UNKNOWN(3);

  companion object {
    fun ofRaw(raw: Int): PigeonMifareClassicType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonMifareUltralightType(val raw: Int) {
  ULTRALIGHT(0),
  ULTRALIGHTC(1),
  UNKNOWN(2);

  companion object {
    fun ofRaw(raw: Int): PigeonMifareUltralightType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTag (
  val handle: String? = null,
  val id: ByteArray? = null,
  val techList: List<String?>? = null,
  val ndef: PigeonNdef? = null,
  val nfcA: PigeonNfcA? = null,
  val nfcB: PigeonNfcB? = null,
  val nfcF: PigeonNfcF? = null,
  val nfcV: PigeonNfcV? = null,
  val isoDep: PigeonIsoDep? = null,
  val mifareClassic: PigeonMifareClassic? = null,
  val mifareUltralight: PigeonMifareUltralight? = null,
  val ndefFormatable: String? = null,
  val nfcBarcode: PigeonNfcBarcode? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonTag {
      val handle = list[0] as String?
      val id = list[1] as ByteArray?
      val techList = list[2] as List<String?>?
      val ndef: PigeonNdef? = (list[3] as List<Any?>?)?.let {
        PigeonNdef.fromList(it)
      }
      val nfcA: PigeonNfcA? = (list[4] as List<Any?>?)?.let {
        PigeonNfcA.fromList(it)
      }
      val nfcB: PigeonNfcB? = (list[5] as List<Any?>?)?.let {
        PigeonNfcB.fromList(it)
      }
      val nfcF: PigeonNfcF? = (list[6] as List<Any?>?)?.let {
        PigeonNfcF.fromList(it)
      }
      val nfcV: PigeonNfcV? = (list[7] as List<Any?>?)?.let {
        PigeonNfcV.fromList(it)
      }
      val isoDep: PigeonIsoDep? = (list[8] as List<Any?>?)?.let {
        PigeonIsoDep.fromList(it)
      }
      val mifareClassic: PigeonMifareClassic? = (list[9] as List<Any?>?)?.let {
        PigeonMifareClassic.fromList(it)
      }
      val mifareUltralight: PigeonMifareUltralight? = (list[10] as List<Any?>?)?.let {
        PigeonMifareUltralight.fromList(it)
      }
      val ndefFormatable = list[11] as String?
      val nfcBarcode: PigeonNfcBarcode? = (list[12] as List<Any?>?)?.let {
        PigeonNfcBarcode.fromList(it)
      }
      return PigeonTag(handle, id, techList, ndef, nfcA, nfcB, nfcF, nfcV, isoDep, mifareClassic, mifareUltralight, ndefFormatable, nfcBarcode)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      handle,
      id,
      techList,
      ndef?.toList(),
      nfcA?.toList(),
      nfcB?.toList(),
      nfcF?.toList(),
      nfcV?.toList(),
      isoDep?.toList(),
      mifareClassic?.toList(),
      mifareUltralight?.toList(),
      ndefFormatable,
      nfcBarcode?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNdef (
  val type: String? = null,
  val canMakeReadOnly: Boolean? = null,
  val isWritable: Boolean? = null,
  val maxSize: Long? = null,
  val cachedNdefMessage: PigeonNdefMessage? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonNdef {
      val type = list[0] as String?
      val canMakeReadOnly = list[1] as Boolean?
      val isWritable = list[2] as Boolean?
      val maxSize = list[3].let { if (it is Int) it.toLong() else it as Long? }
      val cachedNdefMessage: PigeonNdefMessage? = (list[4] as List<Any?>?)?.let {
        PigeonNdefMessage.fromList(it)
      }
      return PigeonNdef(type, canMakeReadOnly, isWritable, maxSize, cachedNdefMessage)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type,
      canMakeReadOnly,
      isWritable,
      maxSize,
      cachedNdefMessage?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNfcA (
  val atqa: ByteArray? = null,
  val sak: Long? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonNfcA {
      val atqa = list[0] as ByteArray?
      val sak = list[1].let { if (it is Int) it.toLong() else it as Long? }
      return PigeonNfcA(atqa, sak)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      atqa,
      sak,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNfcB (
  val applicationData: ByteArray? = null,
  val protocolInfo: ByteArray? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonNfcB {
      val applicationData = list[0] as ByteArray?
      val protocolInfo = list[1] as ByteArray?
      return PigeonNfcB(applicationData, protocolInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      applicationData,
      protocolInfo,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNfcF (
  val manufacturer: ByteArray? = null,
  val systemCode: ByteArray? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonNfcF {
      val manufacturer = list[0] as ByteArray?
      val systemCode = list[1] as ByteArray?
      return PigeonNfcF(manufacturer, systemCode)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      manufacturer,
      systemCode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNfcV (
  val dsfId: Long? = null,
  val responseFlags: Long? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonNfcV {
      val dsfId = list[0].let { if (it is Int) it.toLong() else it as Long? }
      val responseFlags = list[1].let { if (it is Int) it.toLong() else it as Long? }
      return PigeonNfcV(dsfId, responseFlags)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      dsfId,
      responseFlags,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonIsoDep (
  val hiLayerResponse: ByteArray? = null,
  val historicalBytes: ByteArray? = null,
  val isExtendedLengthApduSupported: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonIsoDep {
      val hiLayerResponse = list[0] as ByteArray?
      val historicalBytes = list[1] as ByteArray?
      val isExtendedLengthApduSupported = list[2] as Boolean?
      return PigeonIsoDep(hiLayerResponse, historicalBytes, isExtendedLengthApduSupported)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      hiLayerResponse,
      historicalBytes,
      isExtendedLengthApduSupported,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonMifareClassic (
  val type: PigeonMifareClassicType? = null,
  val blockCount: Long? = null,
  val sectorCount: Long? = null,
  val size: Long? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonMifareClassic {
      val type: PigeonMifareClassicType? = (list[0] as Int?)?.let {
        PigeonMifareClassicType.ofRaw(it)
      }
      val blockCount = list[1].let { if (it is Int) it.toLong() else it as Long? }
      val sectorCount = list[2].let { if (it is Int) it.toLong() else it as Long? }
      val size = list[3].let { if (it is Int) it.toLong() else it as Long? }
      return PigeonMifareClassic(type, blockCount, sectorCount, size)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type?.raw,
      blockCount,
      sectorCount,
      size,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonMifareUltralight (
  val type: PigeonMifareUltralightType? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonMifareUltralight {
      val type: PigeonMifareUltralightType? = (list[0] as Int?)?.let {
        PigeonMifareUltralightType.ofRaw(it)
      }
      return PigeonMifareUltralight(type)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type?.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNfcBarcode (
  val type: Long? = null,
  val barcode: ByteArray? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonNfcBarcode {
      val type = list[0].let { if (it is Int) it.toLong() else it as Long? }
      val barcode = list[1] as ByteArray?
      return PigeonNfcBarcode(type, barcode)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type,
      barcode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNdefMessage (
  val records: List<PigeonNdefRecord?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonNdefMessage {
      val records = list[0] as List<PigeonNdefRecord?>?
      return PigeonNdefMessage(records)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      records,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNdefRecord (
  val tnf: PigeonTypeNameFormat? = null,
  val type: ByteArray? = null,
  val id: ByteArray? = null,
  val payload: ByteArray? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonNdefRecord {
      val tnf: PigeonTypeNameFormat? = (list[0] as Int?)?.let {
        PigeonTypeNameFormat.ofRaw(it)
      }
      val type = list[1] as ByteArray?
      val id = list[2] as ByteArray?
      val payload = list[3] as ByteArray?
      return PigeonNdefRecord(tnf, type, id, payload)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      tnf?.raw,
      type,
      id,
      payload,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object PigeonFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonIsoDep.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonMifareClassic.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonMifareUltralight.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNdef.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNdefMessage.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNdefRecord.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNfcA.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNfcB.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNfcBarcode.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNfcF.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNfcV.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTag.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PigeonIsoDep -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PigeonMifareClassic -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PigeonMifareUltralight -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is PigeonNdef -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is PigeonNdefMessage -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is PigeonNdefRecord -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is PigeonNfcA -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is PigeonNfcB -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is PigeonNfcBarcode -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is PigeonNfcF -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is PigeonNfcV -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is PigeonTag -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class PigeonFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by PigeonFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonFlutterApiCodec
    }
  }
  fun onTagDiscovered(tagArg: PigeonTag, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.onTagDiscovered", codec)
    channel.send(listOf(tagArg)) {
      callback()
    }
  }
  fun onAdapterStateChanged(stateArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.onAdapterStateChanged", codec)
    channel.send(listOf(stateArg)) {
      callback()
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object PigeonHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNdefMessage.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNdefMessage.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNdefRecord.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PigeonNdefMessage -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PigeonNdefMessage -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PigeonNdefRecord -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PigeonHostApi {
  fun nfcAdapterIsEnabled(): Boolean
  fun nfcAdapterIsSecureNfcEnabled(): Boolean
  fun nfcAdapterIsSecureNfcSupported(): Boolean
  fun nfcAdapterEnableReaderMode(flags: List<String>)
  fun nfcAdapterDisableReaderMode()
  fun nfcAdapterEnableForegroundDispatch()
  fun nfcAdapterDisableForegroundDispatch()
  fun ndefGetNdefMessage(handle: String): PigeonNdefMessage?
  fun ndefWriteNdefMessage(handle: String, message: PigeonNdefMessage)
  fun ndefMakeReadOnly(handle: String): Boolean
  fun nfcAGetMaxTransceiveLength(handle: String): Long
  fun nfcAGetTimeout(handle: String): Long
  fun nfcASetTimeout(handle: String, timeout: Long)
  fun nfcATransceive(handle: String, bytes: ByteArray): ByteArray
  fun nfcBGetMaxTransceiveLength(handle: String): Long
  fun nfcBTransceive(handle: String, bytes: ByteArray): ByteArray
  fun nfcFGetMaxTransceiveLength(handle: String): Long
  fun nfcFGetTimeout(handle: String): Long
  fun nfcFSetTimeout(handle: String, timeout: Long)
  fun nfcFTransceive(handle: String, bytes: ByteArray): ByteArray
  fun nfcVGetMaxTransceiveLength(handle: String): Long
  fun nfcVTransceive(handle: String, bytes: ByteArray): ByteArray
  fun isoDepGetMaxTransceiveLength(handle: String): Long
  fun isoDepGetTimeout(handle: String): Long
  fun isoDepSetTimeout(handle: String, timeout: Long)
  fun isoDepTransceive(handle: String, bytes: ByteArray): ByteArray
  fun mifareClassicGetMaxTransceiveLength(handle: String): Long
  fun mifareClassicGetTimeout(handle: String): Long
  fun mifareClassicSetTimeout(handle: String, timeout: Long)
  fun mifareClassicBlockToSector(handle: String, blockIndex: Long): Long
  fun mifareClassicGetBlockCountInSector(handle: String, sectorIndex: Long): Long
  fun mifareClassicSectorToBlock(handle: String, sectorIndex: Long): Long
  fun mifareClassicAuthenticateSectorWithKeyA(handle: String, sectorIndex: Long, key: ByteArray): Boolean
  fun mifareClassicAuthenticateSectorWithKeyB(handle: String, sectorIndex: Long, key: ByteArray): Boolean
  fun mifareClassicIncrement(handle: String, blockIndex: Long, value: Long)
  fun mifareClassicDecrement(handle: String, blockIndex: Long, value: Long)
  fun mifareClassicReadBlock(handle: String, blockIndex: Long): ByteArray
  fun mifareClassicWriteBlock(handle: String, blockIndex: Long, data: ByteArray)
  fun mifareClassicRestore(handle: String, blockIndex: Long)
  fun mifareClassicTransfer(handle: String, blockIndex: Long)
  fun mifareClassicTransceive(handle: String, bytes: ByteArray): ByteArray
  fun mifareUltralightGetMaxTransceiveLength(handle: String): Long
  fun mifareUltralightGetTimeout(handle: String): Long
  fun mifareUltralightSetTimeout(handle: String, timeout: Long)
  fun mifareUltralightReadPages(handle: String, pageOffset: Long): ByteArray
  fun mifareUltralightWritePage(handle: String, pageOffset: Long, data: ByteArray)
  fun mifareUltralightTransceive(handle: String, bytes: ByteArray): ByteArray
  fun ndefFormatableFormat(handle: String, firstMessage: PigeonNdefMessage)
  fun ndefFormatableFormatReadOnly(handle: String, firstMessage: PigeonNdefMessage)

  companion object {
    /** The codec used by PigeonHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonHostApiCodec
    }
    /** Sets up an instance of `PigeonHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: PigeonHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterIsEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcAdapterIsEnabled())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterIsSecureNfcEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcAdapterIsSecureNfcEnabled())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterIsSecureNfcSupported", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcAdapterIsSecureNfcSupported())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterEnableReaderMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val flagsArg = args[0] as List<String>
            var wrapped: List<Any?>
            try {
              api.nfcAdapterEnableReaderMode(flagsArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterDisableReaderMode", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.nfcAdapterDisableReaderMode()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterEnableForegroundDispatch", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.nfcAdapterEnableForegroundDispatch()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterDisableForegroundDispatch", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.nfcAdapterDisableForegroundDispatch()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefGetNdefMessage", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.ndefGetNdefMessage(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefWriteNdefMessage", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val messageArg = args[1] as PigeonNdefMessage
            var wrapped: List<Any?>
            try {
              api.ndefWriteNdefMessage(handleArg, messageArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefMakeReadOnly", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.ndefMakeReadOnly(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAGetMaxTransceiveLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcAGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAGetTimeout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcAGetTimeout(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcASetTimeout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.nfcASetTimeout(handleArg, timeoutArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcATransceive", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcATransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcBGetMaxTransceiveLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcBGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcBTransceive", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcBTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcFGetMaxTransceiveLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcFGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcFGetTimeout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcFGetTimeout(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcFSetTimeout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.nfcFSetTimeout(handleArg, timeoutArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcFTransceive", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcFTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcVGetMaxTransceiveLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcVGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcVTransceive", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nfcVTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.isoDepGetMaxTransceiveLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isoDepGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.isoDepGetTimeout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isoDepGetTimeout(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.isoDepSetTimeout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.isoDepSetTimeout(handleArg, timeoutArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.isoDepTransceive", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isoDepTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicGetMaxTransceiveLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareClassicGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicGetTimeout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareClassicGetTimeout(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicSetTimeout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.mifareClassicSetTimeout(handleArg, timeoutArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicBlockToSector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareClassicBlockToSector(handleArg, blockIndexArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicGetBlockCountInSector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val sectorIndexArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareClassicGetBlockCountInSector(handleArg, sectorIndexArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicSectorToBlock", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val sectorIndexArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareClassicSectorToBlock(handleArg, sectorIndexArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicAuthenticateSectorWithKeyA", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val sectorIndexArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val keyArg = args[2] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareClassicAuthenticateSectorWithKeyA(handleArg, sectorIndexArg, keyArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicAuthenticateSectorWithKeyB", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val sectorIndexArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val keyArg = args[2] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareClassicAuthenticateSectorWithKeyB(handleArg, sectorIndexArg, keyArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicIncrement", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val valueArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.mifareClassicIncrement(handleArg, blockIndexArg, valueArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicDecrement", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val valueArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.mifareClassicDecrement(handleArg, blockIndexArg, valueArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicReadBlock", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareClassicReadBlock(handleArg, blockIndexArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicWriteBlock", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val dataArg = args[2] as ByteArray
            var wrapped: List<Any?>
            try {
              api.mifareClassicWriteBlock(handleArg, blockIndexArg, dataArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicRestore", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.mifareClassicRestore(handleArg, blockIndexArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicTransfer", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.mifareClassicTransfer(handleArg, blockIndexArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicTransceive", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareClassicTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightGetMaxTransceiveLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareUltralightGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightGetTimeout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareUltralightGetTimeout(handleArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightSetTimeout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.mifareUltralightSetTimeout(handleArg, timeoutArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightReadPages", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val pageOffsetArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareUltralightReadPages(handleArg, pageOffsetArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightWritePage", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val pageOffsetArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val dataArg = args[2] as ByteArray
            var wrapped: List<Any?>
            try {
              api.mifareUltralightWritePage(handleArg, pageOffsetArg, dataArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightTransceive", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.mifareUltralightTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefFormatableFormat", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val firstMessageArg = args[1] as PigeonNdefMessage
            var wrapped: List<Any?>
            try {
              api.ndefFormatableFormat(handleArg, firstMessageArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefFormatableFormatReadOnly", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val firstMessageArg = args[1] as PigeonNdefMessage
            var wrapped: List<Any?>
            try {
              api.ndefFormatableFormatReadOnly(handleArg, firstMessageArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
